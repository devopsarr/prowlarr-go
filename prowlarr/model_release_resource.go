/*
Prowlarr

Prowlarr API docs

API version: v1.14.3.4333
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package prowlarr

import (
	"encoding/json"
	"time"
)

// checks if the ReleaseResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseResource{}

// ReleaseResource struct for ReleaseResource
type ReleaseResource struct {
	Id *int32 `json:"id,omitempty"`
	Guid NullableString `json:"guid,omitempty"`
	Age *int32 `json:"age,omitempty"`
	AgeHours *float64 `json:"ageHours,omitempty"`
	AgeMinutes *float64 `json:"ageMinutes,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Files NullableInt32 `json:"files,omitempty"`
	Grabs NullableInt32 `json:"grabs,omitempty"`
	IndexerId *int32 `json:"indexerId,omitempty"`
	Indexer NullableString `json:"indexer,omitempty"`
	SubGroup NullableString `json:"subGroup,omitempty"`
	ReleaseHash NullableString `json:"releaseHash,omitempty"`
	Title NullableString `json:"title,omitempty"`
	SortTitle NullableString `json:"sortTitle,omitempty"`
	ImdbId *int32 `json:"imdbId,omitempty"`
	TmdbId *int32 `json:"tmdbId,omitempty"`
	TvdbId *int32 `json:"tvdbId,omitempty"`
	TvMazeId *int32 `json:"tvMazeId,omitempty"`
	PublishDate *time.Time `json:"publishDate,omitempty"`
	CommentUrl NullableString `json:"commentUrl,omitempty"`
	DownloadUrl NullableString `json:"downloadUrl,omitempty"`
	InfoUrl NullableString `json:"infoUrl,omitempty"`
	PosterUrl NullableString `json:"posterUrl,omitempty"`
	IndexerFlags []string `json:"indexerFlags,omitempty"`
	Categories []IndexerCategory `json:"categories,omitempty"`
	MagnetUrl NullableString `json:"magnetUrl,omitempty"`
	InfoHash NullableString `json:"infoHash,omitempty"`
	Seeders NullableInt32 `json:"seeders,omitempty"`
	Leechers NullableInt32 `json:"leechers,omitempty"`
	Protocol *DownloadProtocol `json:"protocol,omitempty"`
	FileName NullableString `json:"fileName,omitempty"`
}

// NewReleaseResource instantiates a new ReleaseResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseResource() *ReleaseResource {
	this := ReleaseResource{}
	return &this
}

// NewReleaseResourceWithDefaults instantiates a new ReleaseResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseResourceWithDefaults() *ReleaseResource {
	this := ReleaseResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReleaseResource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReleaseResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReleaseResource) SetId(v int32) {
	o.Id = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetGuid() string {
	if o == nil || IsNil(o.Guid.Get()) {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *ReleaseResource) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *ReleaseResource) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *ReleaseResource) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *ReleaseResource) UnsetGuid() {
	o.Guid.Unset()
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *ReleaseResource) GetAge() int32 {
	if o == nil || IsNil(o.Age) {
		var ret int32
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *ReleaseResource) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given int32 and assigns it to the Age field.
func (o *ReleaseResource) SetAge(v int32) {
	o.Age = &v
}

// GetAgeHours returns the AgeHours field value if set, zero value otherwise.
func (o *ReleaseResource) GetAgeHours() float64 {
	if o == nil || IsNil(o.AgeHours) {
		var ret float64
		return ret
	}
	return *o.AgeHours
}

// GetAgeHoursOk returns a tuple with the AgeHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetAgeHoursOk() (*float64, bool) {
	if o == nil || IsNil(o.AgeHours) {
		return nil, false
	}
	return o.AgeHours, true
}

// HasAgeHours returns a boolean if a field has been set.
func (o *ReleaseResource) HasAgeHours() bool {
	if o != nil && !IsNil(o.AgeHours) {
		return true
	}

	return false
}

// SetAgeHours gets a reference to the given float64 and assigns it to the AgeHours field.
func (o *ReleaseResource) SetAgeHours(v float64) {
	o.AgeHours = &v
}

// GetAgeMinutes returns the AgeMinutes field value if set, zero value otherwise.
func (o *ReleaseResource) GetAgeMinutes() float64 {
	if o == nil || IsNil(o.AgeMinutes) {
		var ret float64
		return ret
	}
	return *o.AgeMinutes
}

// GetAgeMinutesOk returns a tuple with the AgeMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetAgeMinutesOk() (*float64, bool) {
	if o == nil || IsNil(o.AgeMinutes) {
		return nil, false
	}
	return o.AgeMinutes, true
}

// HasAgeMinutes returns a boolean if a field has been set.
func (o *ReleaseResource) HasAgeMinutes() bool {
	if o != nil && !IsNil(o.AgeMinutes) {
		return true
	}

	return false
}

// SetAgeMinutes gets a reference to the given float64 and assigns it to the AgeMinutes field.
func (o *ReleaseResource) SetAgeMinutes(v float64) {
	o.AgeMinutes = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ReleaseResource) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ReleaseResource) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ReleaseResource) SetSize(v int64) {
	o.Size = &v
}

// GetFiles returns the Files field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetFiles() int32 {
	if o == nil || IsNil(o.Files.Get()) {
		var ret int32
		return ret
	}
	return *o.Files.Get()
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetFilesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files.Get(), o.Files.IsSet()
}

// HasFiles returns a boolean if a field has been set.
func (o *ReleaseResource) HasFiles() bool {
	if o != nil && o.Files.IsSet() {
		return true
	}

	return false
}

// SetFiles gets a reference to the given NullableInt32 and assigns it to the Files field.
func (o *ReleaseResource) SetFiles(v int32) {
	o.Files.Set(&v)
}
// SetFilesNil sets the value for Files to be an explicit nil
func (o *ReleaseResource) SetFilesNil() {
	o.Files.Set(nil)
}

// UnsetFiles ensures that no value is present for Files, not even an explicit nil
func (o *ReleaseResource) UnsetFiles() {
	o.Files.Unset()
}

// GetGrabs returns the Grabs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetGrabs() int32 {
	if o == nil || IsNil(o.Grabs.Get()) {
		var ret int32
		return ret
	}
	return *o.Grabs.Get()
}

// GetGrabsOk returns a tuple with the Grabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetGrabsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grabs.Get(), o.Grabs.IsSet()
}

// HasGrabs returns a boolean if a field has been set.
func (o *ReleaseResource) HasGrabs() bool {
	if o != nil && o.Grabs.IsSet() {
		return true
	}

	return false
}

// SetGrabs gets a reference to the given NullableInt32 and assigns it to the Grabs field.
func (o *ReleaseResource) SetGrabs(v int32) {
	o.Grabs.Set(&v)
}
// SetGrabsNil sets the value for Grabs to be an explicit nil
func (o *ReleaseResource) SetGrabsNil() {
	o.Grabs.Set(nil)
}

// UnsetGrabs ensures that no value is present for Grabs, not even an explicit nil
func (o *ReleaseResource) UnsetGrabs() {
	o.Grabs.Unset()
}

// GetIndexerId returns the IndexerId field value if set, zero value otherwise.
func (o *ReleaseResource) GetIndexerId() int32 {
	if o == nil || IsNil(o.IndexerId) {
		var ret int32
		return ret
	}
	return *o.IndexerId
}

// GetIndexerIdOk returns a tuple with the IndexerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetIndexerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IndexerId) {
		return nil, false
	}
	return o.IndexerId, true
}

// HasIndexerId returns a boolean if a field has been set.
func (o *ReleaseResource) HasIndexerId() bool {
	if o != nil && !IsNil(o.IndexerId) {
		return true
	}

	return false
}

// SetIndexerId gets a reference to the given int32 and assigns it to the IndexerId field.
func (o *ReleaseResource) SetIndexerId(v int32) {
	o.IndexerId = &v
}

// GetIndexer returns the Indexer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetIndexer() string {
	if o == nil || IsNil(o.Indexer.Get()) {
		var ret string
		return ret
	}
	return *o.Indexer.Get()
}

// GetIndexerOk returns a tuple with the Indexer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetIndexerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indexer.Get(), o.Indexer.IsSet()
}

// HasIndexer returns a boolean if a field has been set.
func (o *ReleaseResource) HasIndexer() bool {
	if o != nil && o.Indexer.IsSet() {
		return true
	}

	return false
}

// SetIndexer gets a reference to the given NullableString and assigns it to the Indexer field.
func (o *ReleaseResource) SetIndexer(v string) {
	o.Indexer.Set(&v)
}
// SetIndexerNil sets the value for Indexer to be an explicit nil
func (o *ReleaseResource) SetIndexerNil() {
	o.Indexer.Set(nil)
}

// UnsetIndexer ensures that no value is present for Indexer, not even an explicit nil
func (o *ReleaseResource) UnsetIndexer() {
	o.Indexer.Unset()
}

// GetSubGroup returns the SubGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetSubGroup() string {
	if o == nil || IsNil(o.SubGroup.Get()) {
		var ret string
		return ret
	}
	return *o.SubGroup.Get()
}

// GetSubGroupOk returns a tuple with the SubGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetSubGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubGroup.Get(), o.SubGroup.IsSet()
}

// HasSubGroup returns a boolean if a field has been set.
func (o *ReleaseResource) HasSubGroup() bool {
	if o != nil && o.SubGroup.IsSet() {
		return true
	}

	return false
}

// SetSubGroup gets a reference to the given NullableString and assigns it to the SubGroup field.
func (o *ReleaseResource) SetSubGroup(v string) {
	o.SubGroup.Set(&v)
}
// SetSubGroupNil sets the value for SubGroup to be an explicit nil
func (o *ReleaseResource) SetSubGroupNil() {
	o.SubGroup.Set(nil)
}

// UnsetSubGroup ensures that no value is present for SubGroup, not even an explicit nil
func (o *ReleaseResource) UnsetSubGroup() {
	o.SubGroup.Unset()
}

// GetReleaseHash returns the ReleaseHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetReleaseHash() string {
	if o == nil || IsNil(o.ReleaseHash.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseHash.Get()
}

// GetReleaseHashOk returns a tuple with the ReleaseHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetReleaseHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseHash.Get(), o.ReleaseHash.IsSet()
}

// HasReleaseHash returns a boolean if a field has been set.
func (o *ReleaseResource) HasReleaseHash() bool {
	if o != nil && o.ReleaseHash.IsSet() {
		return true
	}

	return false
}

// SetReleaseHash gets a reference to the given NullableString and assigns it to the ReleaseHash field.
func (o *ReleaseResource) SetReleaseHash(v string) {
	o.ReleaseHash.Set(&v)
}
// SetReleaseHashNil sets the value for ReleaseHash to be an explicit nil
func (o *ReleaseResource) SetReleaseHashNil() {
	o.ReleaseHash.Set(nil)
}

// UnsetReleaseHash ensures that no value is present for ReleaseHash, not even an explicit nil
func (o *ReleaseResource) UnsetReleaseHash() {
	o.ReleaseHash.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseResource) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ReleaseResource) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ReleaseResource) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ReleaseResource) UnsetTitle() {
	o.Title.Unset()
}

// GetSortTitle returns the SortTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetSortTitle() string {
	if o == nil || IsNil(o.SortTitle.Get()) {
		var ret string
		return ret
	}
	return *o.SortTitle.Get()
}

// GetSortTitleOk returns a tuple with the SortTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetSortTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortTitle.Get(), o.SortTitle.IsSet()
}

// HasSortTitle returns a boolean if a field has been set.
func (o *ReleaseResource) HasSortTitle() bool {
	if o != nil && o.SortTitle.IsSet() {
		return true
	}

	return false
}

// SetSortTitle gets a reference to the given NullableString and assigns it to the SortTitle field.
func (o *ReleaseResource) SetSortTitle(v string) {
	o.SortTitle.Set(&v)
}
// SetSortTitleNil sets the value for SortTitle to be an explicit nil
func (o *ReleaseResource) SetSortTitleNil() {
	o.SortTitle.Set(nil)
}

// UnsetSortTitle ensures that no value is present for SortTitle, not even an explicit nil
func (o *ReleaseResource) UnsetSortTitle() {
	o.SortTitle.Unset()
}

// GetImdbId returns the ImdbId field value if set, zero value otherwise.
func (o *ReleaseResource) GetImdbId() int32 {
	if o == nil || IsNil(o.ImdbId) {
		var ret int32
		return ret
	}
	return *o.ImdbId
}

// GetImdbIdOk returns a tuple with the ImdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetImdbIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ImdbId) {
		return nil, false
	}
	return o.ImdbId, true
}

// HasImdbId returns a boolean if a field has been set.
func (o *ReleaseResource) HasImdbId() bool {
	if o != nil && !IsNil(o.ImdbId) {
		return true
	}

	return false
}

// SetImdbId gets a reference to the given int32 and assigns it to the ImdbId field.
func (o *ReleaseResource) SetImdbId(v int32) {
	o.ImdbId = &v
}

// GetTmdbId returns the TmdbId field value if set, zero value otherwise.
func (o *ReleaseResource) GetTmdbId() int32 {
	if o == nil || IsNil(o.TmdbId) {
		var ret int32
		return ret
	}
	return *o.TmdbId
}

// GetTmdbIdOk returns a tuple with the TmdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetTmdbIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TmdbId) {
		return nil, false
	}
	return o.TmdbId, true
}

// HasTmdbId returns a boolean if a field has been set.
func (o *ReleaseResource) HasTmdbId() bool {
	if o != nil && !IsNil(o.TmdbId) {
		return true
	}

	return false
}

// SetTmdbId gets a reference to the given int32 and assigns it to the TmdbId field.
func (o *ReleaseResource) SetTmdbId(v int32) {
	o.TmdbId = &v
}

// GetTvdbId returns the TvdbId field value if set, zero value otherwise.
func (o *ReleaseResource) GetTvdbId() int32 {
	if o == nil || IsNil(o.TvdbId) {
		var ret int32
		return ret
	}
	return *o.TvdbId
}

// GetTvdbIdOk returns a tuple with the TvdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetTvdbIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TvdbId) {
		return nil, false
	}
	return o.TvdbId, true
}

// HasTvdbId returns a boolean if a field has been set.
func (o *ReleaseResource) HasTvdbId() bool {
	if o != nil && !IsNil(o.TvdbId) {
		return true
	}

	return false
}

// SetTvdbId gets a reference to the given int32 and assigns it to the TvdbId field.
func (o *ReleaseResource) SetTvdbId(v int32) {
	o.TvdbId = &v
}

// GetTvMazeId returns the TvMazeId field value if set, zero value otherwise.
func (o *ReleaseResource) GetTvMazeId() int32 {
	if o == nil || IsNil(o.TvMazeId) {
		var ret int32
		return ret
	}
	return *o.TvMazeId
}

// GetTvMazeIdOk returns a tuple with the TvMazeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetTvMazeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TvMazeId) {
		return nil, false
	}
	return o.TvMazeId, true
}

// HasTvMazeId returns a boolean if a field has been set.
func (o *ReleaseResource) HasTvMazeId() bool {
	if o != nil && !IsNil(o.TvMazeId) {
		return true
	}

	return false
}

// SetTvMazeId gets a reference to the given int32 and assigns it to the TvMazeId field.
func (o *ReleaseResource) SetTvMazeId(v int32) {
	o.TvMazeId = &v
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise.
func (o *ReleaseResource) GetPublishDate() time.Time {
	if o == nil || IsNil(o.PublishDate) {
		var ret time.Time
		return ret
	}
	return *o.PublishDate
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetPublishDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishDate) {
		return nil, false
	}
	return o.PublishDate, true
}

// HasPublishDate returns a boolean if a field has been set.
func (o *ReleaseResource) HasPublishDate() bool {
	if o != nil && !IsNil(o.PublishDate) {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given time.Time and assigns it to the PublishDate field.
func (o *ReleaseResource) SetPublishDate(v time.Time) {
	o.PublishDate = &v
}

// GetCommentUrl returns the CommentUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetCommentUrl() string {
	if o == nil || IsNil(o.CommentUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CommentUrl.Get()
}

// GetCommentUrlOk returns a tuple with the CommentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetCommentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommentUrl.Get(), o.CommentUrl.IsSet()
}

// HasCommentUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasCommentUrl() bool {
	if o != nil && o.CommentUrl.IsSet() {
		return true
	}

	return false
}

// SetCommentUrl gets a reference to the given NullableString and assigns it to the CommentUrl field.
func (o *ReleaseResource) SetCommentUrl(v string) {
	o.CommentUrl.Set(&v)
}
// SetCommentUrlNil sets the value for CommentUrl to be an explicit nil
func (o *ReleaseResource) SetCommentUrlNil() {
	o.CommentUrl.Set(nil)
}

// UnsetCommentUrl ensures that no value is present for CommentUrl, not even an explicit nil
func (o *ReleaseResource) UnsetCommentUrl() {
	o.CommentUrl.Unset()
}

// GetDownloadUrl returns the DownloadUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetDownloadUrl() string {
	if o == nil || IsNil(o.DownloadUrl.Get()) {
		var ret string
		return ret
	}
	return *o.DownloadUrl.Get()
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadUrl.Get(), o.DownloadUrl.IsSet()
}

// HasDownloadUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasDownloadUrl() bool {
	if o != nil && o.DownloadUrl.IsSet() {
		return true
	}

	return false
}

// SetDownloadUrl gets a reference to the given NullableString and assigns it to the DownloadUrl field.
func (o *ReleaseResource) SetDownloadUrl(v string) {
	o.DownloadUrl.Set(&v)
}
// SetDownloadUrlNil sets the value for DownloadUrl to be an explicit nil
func (o *ReleaseResource) SetDownloadUrlNil() {
	o.DownloadUrl.Set(nil)
}

// UnsetDownloadUrl ensures that no value is present for DownloadUrl, not even an explicit nil
func (o *ReleaseResource) UnsetDownloadUrl() {
	o.DownloadUrl.Unset()
}

// GetInfoUrl returns the InfoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetInfoUrl() string {
	if o == nil || IsNil(o.InfoUrl.Get()) {
		var ret string
		return ret
	}
	return *o.InfoUrl.Get()
}

// GetInfoUrlOk returns a tuple with the InfoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetInfoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InfoUrl.Get(), o.InfoUrl.IsSet()
}

// HasInfoUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasInfoUrl() bool {
	if o != nil && o.InfoUrl.IsSet() {
		return true
	}

	return false
}

// SetInfoUrl gets a reference to the given NullableString and assigns it to the InfoUrl field.
func (o *ReleaseResource) SetInfoUrl(v string) {
	o.InfoUrl.Set(&v)
}
// SetInfoUrlNil sets the value for InfoUrl to be an explicit nil
func (o *ReleaseResource) SetInfoUrlNil() {
	o.InfoUrl.Set(nil)
}

// UnsetInfoUrl ensures that no value is present for InfoUrl, not even an explicit nil
func (o *ReleaseResource) UnsetInfoUrl() {
	o.InfoUrl.Unset()
}

// GetPosterUrl returns the PosterUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetPosterUrl() string {
	if o == nil || IsNil(o.PosterUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PosterUrl.Get()
}

// GetPosterUrlOk returns a tuple with the PosterUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetPosterUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PosterUrl.Get(), o.PosterUrl.IsSet()
}

// HasPosterUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasPosterUrl() bool {
	if o != nil && o.PosterUrl.IsSet() {
		return true
	}

	return false
}

// SetPosterUrl gets a reference to the given NullableString and assigns it to the PosterUrl field.
func (o *ReleaseResource) SetPosterUrl(v string) {
	o.PosterUrl.Set(&v)
}
// SetPosterUrlNil sets the value for PosterUrl to be an explicit nil
func (o *ReleaseResource) SetPosterUrlNil() {
	o.PosterUrl.Set(nil)
}

// UnsetPosterUrl ensures that no value is present for PosterUrl, not even an explicit nil
func (o *ReleaseResource) UnsetPosterUrl() {
	o.PosterUrl.Unset()
}

// GetIndexerFlags returns the IndexerFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetIndexerFlags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IndexerFlags
}

// GetIndexerFlagsOk returns a tuple with the IndexerFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetIndexerFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IndexerFlags) {
		return nil, false
	}
	return o.IndexerFlags, true
}

// HasIndexerFlags returns a boolean if a field has been set.
func (o *ReleaseResource) HasIndexerFlags() bool {
	if o != nil && !IsNil(o.IndexerFlags) {
		return true
	}

	return false
}

// SetIndexerFlags gets a reference to the given []string and assigns it to the IndexerFlags field.
func (o *ReleaseResource) SetIndexerFlags(v []string) {
	o.IndexerFlags = v
}

// GetCategories returns the Categories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetCategories() []IndexerCategory {
	if o == nil {
		var ret []IndexerCategory
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetCategoriesOk() ([]IndexerCategory, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ReleaseResource) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []IndexerCategory and assigns it to the Categories field.
func (o *ReleaseResource) SetCategories(v []IndexerCategory) {
	o.Categories = v
}

// GetMagnetUrl returns the MagnetUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetMagnetUrl() string {
	if o == nil || IsNil(o.MagnetUrl.Get()) {
		var ret string
		return ret
	}
	return *o.MagnetUrl.Get()
}

// GetMagnetUrlOk returns a tuple with the MagnetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetMagnetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MagnetUrl.Get(), o.MagnetUrl.IsSet()
}

// HasMagnetUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasMagnetUrl() bool {
	if o != nil && o.MagnetUrl.IsSet() {
		return true
	}

	return false
}

// SetMagnetUrl gets a reference to the given NullableString and assigns it to the MagnetUrl field.
func (o *ReleaseResource) SetMagnetUrl(v string) {
	o.MagnetUrl.Set(&v)
}
// SetMagnetUrlNil sets the value for MagnetUrl to be an explicit nil
func (o *ReleaseResource) SetMagnetUrlNil() {
	o.MagnetUrl.Set(nil)
}

// UnsetMagnetUrl ensures that no value is present for MagnetUrl, not even an explicit nil
func (o *ReleaseResource) UnsetMagnetUrl() {
	o.MagnetUrl.Unset()
}

// GetInfoHash returns the InfoHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetInfoHash() string {
	if o == nil || IsNil(o.InfoHash.Get()) {
		var ret string
		return ret
	}
	return *o.InfoHash.Get()
}

// GetInfoHashOk returns a tuple with the InfoHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetInfoHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InfoHash.Get(), o.InfoHash.IsSet()
}

// HasInfoHash returns a boolean if a field has been set.
func (o *ReleaseResource) HasInfoHash() bool {
	if o != nil && o.InfoHash.IsSet() {
		return true
	}

	return false
}

// SetInfoHash gets a reference to the given NullableString and assigns it to the InfoHash field.
func (o *ReleaseResource) SetInfoHash(v string) {
	o.InfoHash.Set(&v)
}
// SetInfoHashNil sets the value for InfoHash to be an explicit nil
func (o *ReleaseResource) SetInfoHashNil() {
	o.InfoHash.Set(nil)
}

// UnsetInfoHash ensures that no value is present for InfoHash, not even an explicit nil
func (o *ReleaseResource) UnsetInfoHash() {
	o.InfoHash.Unset()
}

// GetSeeders returns the Seeders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetSeeders() int32 {
	if o == nil || IsNil(o.Seeders.Get()) {
		var ret int32
		return ret
	}
	return *o.Seeders.Get()
}

// GetSeedersOk returns a tuple with the Seeders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetSeedersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Seeders.Get(), o.Seeders.IsSet()
}

// HasSeeders returns a boolean if a field has been set.
func (o *ReleaseResource) HasSeeders() bool {
	if o != nil && o.Seeders.IsSet() {
		return true
	}

	return false
}

// SetSeeders gets a reference to the given NullableInt32 and assigns it to the Seeders field.
func (o *ReleaseResource) SetSeeders(v int32) {
	o.Seeders.Set(&v)
}
// SetSeedersNil sets the value for Seeders to be an explicit nil
func (o *ReleaseResource) SetSeedersNil() {
	o.Seeders.Set(nil)
}

// UnsetSeeders ensures that no value is present for Seeders, not even an explicit nil
func (o *ReleaseResource) UnsetSeeders() {
	o.Seeders.Unset()
}

// GetLeechers returns the Leechers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetLeechers() int32 {
	if o == nil || IsNil(o.Leechers.Get()) {
		var ret int32
		return ret
	}
	return *o.Leechers.Get()
}

// GetLeechersOk returns a tuple with the Leechers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetLeechersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Leechers.Get(), o.Leechers.IsSet()
}

// HasLeechers returns a boolean if a field has been set.
func (o *ReleaseResource) HasLeechers() bool {
	if o != nil && o.Leechers.IsSet() {
		return true
	}

	return false
}

// SetLeechers gets a reference to the given NullableInt32 and assigns it to the Leechers field.
func (o *ReleaseResource) SetLeechers(v int32) {
	o.Leechers.Set(&v)
}
// SetLeechersNil sets the value for Leechers to be an explicit nil
func (o *ReleaseResource) SetLeechersNil() {
	o.Leechers.Set(nil)
}

// UnsetLeechers ensures that no value is present for Leechers, not even an explicit nil
func (o *ReleaseResource) UnsetLeechers() {
	o.Leechers.Unset()
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ReleaseResource) GetProtocol() DownloadProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret DownloadProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetProtocolOk() (*DownloadProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ReleaseResource) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given DownloadProtocol and assigns it to the Protocol field.
func (o *ReleaseResource) SetProtocol(v DownloadProtocol) {
	o.Protocol = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetFileName() string {
	if o == nil || IsNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *ReleaseResource) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *ReleaseResource) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *ReleaseResource) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *ReleaseResource) UnsetFileName() {
	o.FileName.Unset()
}

func (o ReleaseResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.AgeHours) {
		toSerialize["ageHours"] = o.AgeHours
	}
	if !IsNil(o.AgeMinutes) {
		toSerialize["ageMinutes"] = o.AgeMinutes
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if o.Files.IsSet() {
		toSerialize["files"] = o.Files.Get()
	}
	if o.Grabs.IsSet() {
		toSerialize["grabs"] = o.Grabs.Get()
	}
	if !IsNil(o.IndexerId) {
		toSerialize["indexerId"] = o.IndexerId
	}
	if o.Indexer.IsSet() {
		toSerialize["indexer"] = o.Indexer.Get()
	}
	if o.SubGroup.IsSet() {
		toSerialize["subGroup"] = o.SubGroup.Get()
	}
	if o.ReleaseHash.IsSet() {
		toSerialize["releaseHash"] = o.ReleaseHash.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.SortTitle.IsSet() {
		toSerialize["sortTitle"] = o.SortTitle.Get()
	}
	if !IsNil(o.ImdbId) {
		toSerialize["imdbId"] = o.ImdbId
	}
	if !IsNil(o.TmdbId) {
		toSerialize["tmdbId"] = o.TmdbId
	}
	if !IsNil(o.TvdbId) {
		toSerialize["tvdbId"] = o.TvdbId
	}
	if !IsNil(o.TvMazeId) {
		toSerialize["tvMazeId"] = o.TvMazeId
	}
	if !IsNil(o.PublishDate) {
		toSerialize["publishDate"] = o.PublishDate
	}
	if o.CommentUrl.IsSet() {
		toSerialize["commentUrl"] = o.CommentUrl.Get()
	}
	if o.DownloadUrl.IsSet() {
		toSerialize["downloadUrl"] = o.DownloadUrl.Get()
	}
	if o.InfoUrl.IsSet() {
		toSerialize["infoUrl"] = o.InfoUrl.Get()
	}
	if o.PosterUrl.IsSet() {
		toSerialize["posterUrl"] = o.PosterUrl.Get()
	}
	if o.IndexerFlags != nil {
		toSerialize["indexerFlags"] = o.IndexerFlags
	}
	if o.Categories != nil {
		toSerialize["categories"] = o.Categories
	}
	if o.MagnetUrl.IsSet() {
		toSerialize["magnetUrl"] = o.MagnetUrl.Get()
	}
	if o.InfoHash.IsSet() {
		toSerialize["infoHash"] = o.InfoHash.Get()
	}
	if o.Seeders.IsSet() {
		toSerialize["seeders"] = o.Seeders.Get()
	}
	if o.Leechers.IsSet() {
		toSerialize["leechers"] = o.Leechers.Get()
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if o.FileName.IsSet() {
		toSerialize["fileName"] = o.FileName.Get()
	}
	return toSerialize, nil
}

type NullableReleaseResource struct {
	value *ReleaseResource
	isSet bool
}

func (v NullableReleaseResource) Get() *ReleaseResource {
	return v.value
}

func (v *NullableReleaseResource) Set(val *ReleaseResource) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseResource) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseResource(val *ReleaseResource) *NullableReleaseResource {
	return &NullableReleaseResource{value: val, isSet: true}
}

func (v NullableReleaseResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


