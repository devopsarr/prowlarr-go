/*
Prowlarr

Prowlarr API docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package prowlarr

import (
	"encoding/json"
)

// IndexerEditorResource struct for IndexerEditorResource
type IndexerEditorResource struct {
	IndexerIds []*int32 `json:"indexerIds,omitempty"`
	Enable NullableBool `json:"enable,omitempty"`
	AppProfileId NullableInt32 `json:"appProfileId,omitempty"`
	Priority NullableInt32 `json:"priority,omitempty"`
	Tags []*int32 `json:"tags,omitempty"`
	ApplyTags *ApplyTags `json:"applyTags,omitempty"`
}

// NewIndexerEditorResource instantiates a new IndexerEditorResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexerEditorResource() *IndexerEditorResource {
	this := IndexerEditorResource{}
	return &this
}

// NewIndexerEditorResourceWithDefaults instantiates a new IndexerEditorResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexerEditorResourceWithDefaults() *IndexerEditorResource {
	this := IndexerEditorResource{}
	return &this
}

// GetIndexerIds returns the IndexerIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerEditorResource) GetIndexerIds() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.IndexerIds
}

// GetIndexerIdsOk returns a tuple with the IndexerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerEditorResource) GetIndexerIdsOk() ([]*int32, bool) {
	if o == nil || isNil(o.IndexerIds) {
    return nil, false
	}
	return o.IndexerIds, true
}

// HasIndexerIds returns a boolean if a field has been set.
func (o *IndexerEditorResource) HasIndexerIds() bool {
	if o != nil && isNil(o.IndexerIds) {
		return true
	}

	return false
}

// SetIndexerIds gets a reference to the given []int32 and assigns it to the IndexerIds field.
func (o *IndexerEditorResource) SetIndexerIds(v []*int32) {
	o.IndexerIds = v
}

// GetEnable returns the Enable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerEditorResource) GetEnable() bool {
	if o == nil || isNil(o.Enable.Get()) {
		var ret bool
		return ret
	}
	return *o.Enable.Get()
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerEditorResource) GetEnableOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.Enable.Get(), o.Enable.IsSet()
}

// HasEnable returns a boolean if a field has been set.
func (o *IndexerEditorResource) HasEnable() bool {
	if o != nil && o.Enable.IsSet() {
		return true
	}

	return false
}

// SetEnable gets a reference to the given NullableBool and assigns it to the Enable field.
func (o *IndexerEditorResource) SetEnable(v bool) {
	o.Enable.Set(&v)
}
// SetEnableNil sets the value for Enable to be an explicit nil
func (o *IndexerEditorResource) SetEnableNil() {
	o.Enable.Set(nil)
}

// UnsetEnable ensures that no value is present for Enable, not even an explicit nil
func (o *IndexerEditorResource) UnsetEnable() {
	o.Enable.Unset()
}

// GetAppProfileId returns the AppProfileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerEditorResource) GetAppProfileId() int32 {
	if o == nil || isNil(o.AppProfileId.Get()) {
		var ret int32
		return ret
	}
	return *o.AppProfileId.Get()
}

// GetAppProfileIdOk returns a tuple with the AppProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerEditorResource) GetAppProfileIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.AppProfileId.Get(), o.AppProfileId.IsSet()
}

// HasAppProfileId returns a boolean if a field has been set.
func (o *IndexerEditorResource) HasAppProfileId() bool {
	if o != nil && o.AppProfileId.IsSet() {
		return true
	}

	return false
}

// SetAppProfileId gets a reference to the given NullableInt32 and assigns it to the AppProfileId field.
func (o *IndexerEditorResource) SetAppProfileId(v int32) {
	o.AppProfileId.Set(&v)
}
// SetAppProfileIdNil sets the value for AppProfileId to be an explicit nil
func (o *IndexerEditorResource) SetAppProfileIdNil() {
	o.AppProfileId.Set(nil)
}

// UnsetAppProfileId ensures that no value is present for AppProfileId, not even an explicit nil
func (o *IndexerEditorResource) UnsetAppProfileId() {
	o.AppProfileId.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerEditorResource) GetPriority() int32 {
	if o == nil || isNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerEditorResource) GetPriorityOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *IndexerEditorResource) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableInt32 and assigns it to the Priority field.
func (o *IndexerEditorResource) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *IndexerEditorResource) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *IndexerEditorResource) UnsetPriority() {
	o.Priority.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerEditorResource) GetTags() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerEditorResource) GetTagsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IndexerEditorResource) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *IndexerEditorResource) SetTags(v []*int32) {
	o.Tags = v
}

// GetApplyTags returns the ApplyTags field value if set, zero value otherwise.
func (o *IndexerEditorResource) GetApplyTags() ApplyTags {
	if o == nil || isNil(o.ApplyTags) {
		var ret ApplyTags
		return ret
	}
	return *o.ApplyTags
}

// GetApplyTagsOk returns a tuple with the ApplyTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerEditorResource) GetApplyTagsOk() (*ApplyTags, bool) {
	if o == nil || isNil(o.ApplyTags) {
    return nil, false
	}
	return o.ApplyTags, true
}

// HasApplyTags returns a boolean if a field has been set.
func (o *IndexerEditorResource) HasApplyTags() bool {
	if o != nil && !isNil(o.ApplyTags) {
		return true
	}

	return false
}

// SetApplyTags gets a reference to the given ApplyTags and assigns it to the ApplyTags field.
func (o *IndexerEditorResource) SetApplyTags(v ApplyTags) {
	o.ApplyTags = &v
}

func (o IndexerEditorResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IndexerIds != nil {
		toSerialize["indexerIds"] = o.IndexerIds
	}
	if o.Enable.IsSet() {
		toSerialize["enable"] = o.Enable.Get()
	}
	if o.AppProfileId.IsSet() {
		toSerialize["appProfileId"] = o.AppProfileId.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.ApplyTags) {
		toSerialize["applyTags"] = o.ApplyTags
	}
	return json.Marshal(toSerialize)
}

type NullableIndexerEditorResource struct {
	value *IndexerEditorResource
	isSet bool
}

func (v NullableIndexerEditorResource) Get() *IndexerEditorResource {
	return v.value
}

func (v *NullableIndexerEditorResource) Set(val *IndexerEditorResource) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexerEditorResource) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexerEditorResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexerEditorResource(val *IndexerEditorResource) *NullableIndexerEditorResource {
	return &NullableIndexerEditorResource{value: val, isSet: true}
}

func (v NullableIndexerEditorResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexerEditorResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


